# Goes up the directory tree; up 3 = cd ../../..
function up {
	local counter=${1:-1}
	local dirup="../"
	local out=""

	while (( counter > 0 )); do
	        let counter--
		out="${out}$dirup"
	done

	cd $out
}

# Compile and run C file
quick_make () { 
	gcc -Wall -Wextra -pedantic -std=c11 -o "${1%.*}" "$1"
	if [ $? -eq 0 ]; then
		./"${1%.*}"
	else
	echo "Compilation failed."
	fi
}

# Encode into url
urlencode() {
	setopt localoptions extendedglob
	input=( ${(s::)1} )
	print ${(j::)input/(#b)([^A-Za-z0-9_.\!~*\'\(\)-])/%${(l:2::0:)$(([##16]#match))}}
}


# Google something
function google {
	xdg-open "https://duckduckgo.com/?t=ffab&q=`urlencode "${(j: :)@}"`"
}


# Prints a separator banner as wide as the window
function hr {
	print ${(l:COLUMNS::=:)}
}

# Use lf as a visual directory selector, ctrl+o is a shortcut
function lfcd() {
	cd "$(lf -print-last-dir "$@")"
}
bindkey -s '^o' 'lfcd\n'

# Snapshot and system update
function _sysup(){
	if [ "$EUID" -ne 0 ]; then
		echo "Must run as root"
		return 1
	fi
	if ! snapper -c root create --description "system update $(date +"%d-%m-%Y")"; then
		echo "Snapshot creation failed!"
		return 1
	fi
	pacman -Syu
}
alias update='zsh -c "$(declare -f _sysup);_sysup"'

# Rollback to last system update (per the previous function)
function _rollback(){
	if [ "$EUID" -ne 0 ]; then
		echo "Must run as root"
		return 1
	fi
	
	if ! snapper -c root create; then
		echo "Snapshot creation failed!"
		return 1
	fi

	TEMP_SNAPSHOT=$(sudo snapper list | tail -n 1 | awk -F '│' '{print $1}' | xargs)
	LAST_SYS_UPDATE=$(sudo snapper list | awk -F '│' '{print $1, $7}' | grep 'system update' | awk '{print $1}' | tail -n 1 | xargs)

	if [[ -z "$LAST_SYS_UPDATE" ]]; then
		echo "No system update found"
		return 1
	fi

	snapper undochange $LAST_SYS_UPDATE..$TEMP_SNAPSHOT
	
	snapper delete $TEMP_SNAPSHOT
}
alias rollback='zsh -c "$(declare -f _rollback);_rollback"'

# Unzips using 7zip
function uz() {
	local file="$1"
	local dir="${file%.*}"
	mkdir -p "$dir"
	7z x "$file" -o"$dir"
}

## completion
function _7z_completion {
	_files -g '*.7z *.zip *.gz *.gzip *.tgz *.bz2 *.tar *.bzip2 *.tbz2 *.tbz *.rar *.cab *.arj *.z *.taz *.cpio *.rpm *.deb *.lzh *.lha *.chm *.chw *.hxs *.iso *.msl *.doc *.xls *.ppt *.wim *.swm *.exe'
	# https://documentation.help/7-Zip/formats.htm
}
compdef _7z_completion extract
